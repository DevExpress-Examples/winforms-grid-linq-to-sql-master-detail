'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LinqWithEditing

    <System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")>
    Public Partial Class NorthwindProductsDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertCategory(ByVal instance As LinqWithEditing.Category)
        End Sub

        Partial Private Sub UpdateCategory(ByVal instance As LinqWithEditing.Category)
        End Sub

        Partial Private Sub DeleteCategory(ByVal instance As LinqWithEditing.Category)
        End Sub

        Partial Private Sub InsertProduct(ByVal instance As LinqWithEditing.Product)
        End Sub

        Partial Private Sub UpdateProduct(ByVal instance As LinqWithEditing.Product)
        End Sub

        Partial Private Sub DeleteProduct(ByVal instance As LinqWithEditing.Product)
        End Sub

#End Region
        Public Sub New()
            MyBase.New(Global.LinqWithEditing.Properties.Settings.[Default].NorthwindConnectionString, LinqWithEditing.NorthwindProductsDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, LinqWithEditing.NorthwindProductsDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, LinqWithEditing.NorthwindProductsDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property Categories As System.Data.Linq.Table(Of LinqWithEditing.Category)
            Get
                Return Me.GetTable(Of LinqWithEditing.Category)()
            End Get
        End Property

        Public ReadOnly Property Products As System.Data.Linq.Table(Of LinqWithEditing.Product)
            Get
                Return Me.GetTable(Of LinqWithEditing.Product)()
            End Get
        End Property
    End Class

    <Table(Name:="dbo.Categories")>
    Public Partial Class Category
        Inherits INotifyPropertyChanging
        Implements INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs([String].Empty)

        Private _CategoryID As Integer

        Private _CategoryName As String

        Private _Description As String

        Private _Picture As System.Data.Linq.Binary

        Private _Products As EntitySet(Of LinqWithEditing.Product)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnCategoryIDChanged()
        End Sub

        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCategoryNameChanged()
        End Sub

        Partial Private Sub OnDescriptionChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnDescriptionChanged()
        End Sub

        Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
        End Sub

        Partial Private Sub OnPictureChanged()
        End Sub

#End Region
        Public Sub New()
            Me._Products = New EntitySet(Of LinqWithEditing.Product)(New Action(Of LinqWithEditing.Product)(AddressOf Me.attach_Products), New Action(Of LinqWithEditing.Product)(AddressOf Me.detach_Products))
            Me.OnCreated()
        End Sub

        <Column(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property CategoryID As Integer
            Get
                Return Me._CategoryID
            End Get

            Set(ByVal value As Integer)
                If(Me._CategoryID IsNot value) Then
                    Me.OnCategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
        Public Property CategoryName As String
            Get
                Return Me._CategoryName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._CategoryName, value)) Then
                    Me.OnCategoryNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryName = value
                    Me.SendPropertyChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
        Public Property Description As String
            Get
                Return Me._Description
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Description, value)) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>
        Public Property Picture As System.Data.Linq.Binary
            Get
                Return Me._Picture
            End Get

            Set(ByVal value As System.Data.Linq.Binary)
                If(Me._Picture IsNot value) Then
                    Me.OnPictureChanging(value)
                    Me.SendPropertyChanging()
                    Me._Picture = value
                    Me.SendPropertyChanged("Picture")
                    Me.OnPictureChanged()
                End If
            End Set
        End Property

        <Association(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")>
        Public Property Products As EntitySet(Of LinqWithEditing.Product)
            Get
                Return Me._Products
            End Get

            Set(ByVal value As EntitySet(Of LinqWithEditing.Product))
                Me._Products.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler

        Public Event PropertyChanged As PropertyChangedEventHandler

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChangingEvent(Me, LinqWithEditing.Category.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            RaiseEvent PropertyChangedEvent(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Products(ByVal entity As LinqWithEditing.Product)
            Me.SendPropertyChanging()
            entity.Category = Me
        End Sub

        Private Sub detach_Products(ByVal entity As LinqWithEditing.Product)
            Me.SendPropertyChanging()
            entity.Category = Nothing
        End Sub
    End Class

    <Table(Name:="dbo.Products")>
    Public Partial Class Product
        Inherits INotifyPropertyChanging
        Implements INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs([String].Empty)

        Private _ProductID As Integer

        Private _ProductName As String

        Private _SupplierID As System.Nullable(Of Integer)

        Private _CategoryID As System.Nullable(Of Integer)

        Private _QuantityPerUnit As String

        Private _UnitPrice As System.Nullable(Of Decimal)

        Private _UnitsInStock As System.Nullable(Of Short)

        Private _UnitsOnOrder As System.Nullable(Of Short)

        Private _ReorderLevel As System.Nullable(Of Short)

        Private _Discontinued As Boolean

        Private _Category As EntityRef(Of LinqWithEditing.Category)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnProductIDChanged()
        End Sub

        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductNameChanged()
        End Sub

        Partial Private Sub OnSupplierIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnSupplierIDChanged()
        End Sub

        Partial Private Sub OnCategoryIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnCategoryIDChanged()
        End Sub

        Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnQuantityPerUnitChanged()
        End Sub

        Partial Private Sub OnUnitPriceChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub

        Partial Private Sub OnUnitPriceChanged()
        End Sub

        Partial Private Sub OnUnitsInStockChanging(ByVal value As System.Nullable(Of Short))
        End Sub

        Partial Private Sub OnUnitsInStockChanged()
        End Sub

        Partial Private Sub OnUnitsOnOrderChanging(ByVal value As System.Nullable(Of Short))
        End Sub

        Partial Private Sub OnUnitsOnOrderChanged()
        End Sub

        Partial Private Sub OnReorderLevelChanging(ByVal value As System.Nullable(Of Short))
        End Sub

        Partial Private Sub OnReorderLevelChanged()
        End Sub

        Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnDiscontinuedChanged()
        End Sub

#End Region
        Public Sub New()
            Me._Category = DirectCast(Nothing, EntityRef(Of Global.LinqWithEditing.Category))
            Me.OnCreated()
        End Sub

        <Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get

            Set(ByVal value As Integer)
                If(Me._ProductID IsNot value) Then
                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
        Public Property ProductName As String
            Get
                Return Me._ProductName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ProductName, value)) Then
                    Me.OnProductNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductName = value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_SupplierID", DbType:="Int")>
        Public Property SupplierID As System.Nullable(Of Integer)
            Get
                Return Me._SupplierID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._SupplierID IsNot value) Then
                    Me.OnSupplierIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._SupplierID = value
                    Me.SendPropertyChanged("SupplierID")
                    Me.OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CategoryID", DbType:="Int")>
        Public Property CategoryID As System.Nullable(Of Integer)
            Get
                Return Me._CategoryID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._CategoryID IsNot value) Then
                    If Me._Category.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnCategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")>
        Public Property QuantityPerUnit As String
            Get
                Return Me._QuantityPerUnit
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._QuantityPerUnit, value)) Then
                    Me.OnQuantityPerUnitChanging(value)
                    Me.SendPropertyChanging()
                    Me._QuantityPerUnit = value
                    Me.SendPropertyChanged("QuantityPerUnit")
                    Me.OnQuantityPerUnitChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitPrice", DbType:="Money")>
        Public Property UnitPrice As System.Nullable(Of Decimal)
            Get
                Return Me._UnitPrice
            End Get

            Set(ByVal value As System.Nullable(Of Decimal))
                If(Me._UnitPrice IsNot value) Then
                    Me.OnUnitPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitPrice = value
                    Me.SendPropertyChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitsInStock", DbType:="SmallInt")>
        Public Property UnitsInStock As System.Nullable(Of Short)
            Get
                Return Me._UnitsInStock
            End Get

            Set(ByVal value As System.Nullable(Of Short))
                If(Me._UnitsInStock IsNot value) Then
                    Me.OnUnitsInStockChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitsInStock = value
                    Me.SendPropertyChanged("UnitsInStock")
                    Me.OnUnitsInStockChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitsOnOrder", DbType:="SmallInt")>
        Public Property UnitsOnOrder As System.Nullable(Of Short)
            Get
                Return Me._UnitsOnOrder
            End Get

            Set(ByVal value As System.Nullable(Of Short))
                If(Me._UnitsOnOrder IsNot value) Then
                    Me.OnUnitsOnOrderChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitsOnOrder = value
                    Me.SendPropertyChanged("UnitsOnOrder")
                    Me.OnUnitsOnOrderChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ReorderLevel", DbType:="SmallInt")>
        Public Property ReorderLevel As System.Nullable(Of Short)
            Get
                Return Me._ReorderLevel
            End Get

            Set(ByVal value As System.Nullable(Of Short))
                If(Me._ReorderLevel IsNot value) Then
                    Me.OnReorderLevelChanging(value)
                    Me.SendPropertyChanging()
                    Me._ReorderLevel = value
                    Me.SendPropertyChanged("ReorderLevel")
                    Me.OnReorderLevelChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")>
        Public Property Discontinued As Boolean
            Get
                Return Me._Discontinued
            End Get

            Set(ByVal value As Boolean)
                If(Me._Discontinued IsNot value) Then
                    Me.OnDiscontinuedChanging(value)
                    Me.SendPropertyChanging()
                    Me._Discontinued = value
                    Me.SendPropertyChanged("Discontinued")
                    Me.OnDiscontinuedChanged()
                End If
            End Set
        End Property

        <Association(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)>
        Public Property Category As Category
            Get
                Return Me._Category.Entity
            End Get

            Set(ByVal value As Category)
                Dim previousValue As LinqWithEditing.Category = Me._Category.Entity
                If((previousValue IsNot value) OrElse (Me._Category.HasLoadedOrAssignedValue Is False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Category.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If

                    Me._Category.Entity = value
                    If(value IsNot Nothing) Then
                        value.Products.Add(Me)
                        Me._CategoryID = value.CategoryID
                    Else
                        Me._CategoryID = DirectCast(Nothing, Nullable(Of System.Int32))
                    End If

                    Me.SendPropertyChanged("Category")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler

        Public Event PropertyChanged As PropertyChangedEventHandler

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChangingEvent(Me, LinqWithEditing.Product.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            RaiseEvent PropertyChangedEvent(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace
